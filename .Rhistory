deviance(m.qp)
df.residual(m.qp)
m.qp <- glm(Number.of.failures ~ Mode.1, data=df, family=quasipoisson)
printCoefmat( coef( summary(m.qp)))
plot( resid(m.qp) ~ sqrt(fitted(m.qp)), las=1, main="Deviance residuals", ylab="Deviance residuals",xlab="Square root of fitted values" )
plot( cooks.distance(m.qp), type="h", las=1,ylab="Cook's distance, D", main="Cook's distance")
qqnorm( resid(m.qp), las=1,main="Normal Q-Q plot\ndeviance residuals")
qqline( resid(m.qp))
plot( resid(m.qp) ~ sqrt(fitted(m.qp)), las=1, main="Deviance residuals", ylab="Deviance residuals",xlab="Square root of fitted values" )
library(PASWR)
library(memisc)
Time.spent.Mode.1 <- c(33.3, 52.2, 64.7, 137, 125.9, 116.3, 131.7, 85, 91.9)
Time.spent.Mode.2 <- c(25.3, 14.4, 32.5, 20.5, 97.6, 53.6, 56.6, 87.3, 47.8)
Number.of.failures <- c(15,9,14,24,27,27,23,18,22)
df <- data.frame("Mode 1"= Time.spent.Mode.1, "Mode 2"= Time.spent.Mode.2, "Number of failures"=Number.of.failures)
df
summary(df)
plot(Number.of.failures ~ Mode.1, data=df, xlab="Time spent in Mode 1", ylab="Number of failures")
par(mfrow=c(1,2))
plot(Number.of.failures ~ Mode.2, data=df,xlab="Time spent in Mode 2",ylab="Number of failures")
plot(log(Number.of.failures) ~ log(Mode.2), data=df,xlab="log(Time spent in Mode 2)",ylab="Number of failures")
fitted.identity <- lm(Number.of.failures ~ Mode.1 + log(Mode.2), data=df)
printCoefmat( coef( summary(fitted.identity)))
fitted.poisson <- glm(Number.of.failures ~ Mode.1 + log(Mode.2), data=df, family=poisson(link="log"))
printCoefmat( coef( summary(fitted.poisson)))
deviance(fitted.poisson)
df.residual(fitted.poisson)
m.qp <- glm(Number.of.failures ~ Mode.1, data=df, family=quasipoisson)
printCoefmat( coef( summary(m.qp)))
plot( resid(m.qp) ~ sqrt(fitted(m.qp)), las=1, main="Deviance residuals", ylab="Deviance residuals",xlab="Square root of fitted values" )
qqnorm( resid(m.qp), las=1,main="Normal Q-Q plot\ndeviance residuals")
qqline( resid(m.qp))
plot( resid(m.qp) ~ sqrt(fitted(m.qp)), las=1, main="Deviance residuals", ylab="Deviance residuals",xlab="Square root of fitted values" )
plot( cooks.distance(m.qp), type="h", las=1,ylab="Cook's distance, D", main="Cook's distance")
qqnorm( resid(m.qp), las=1,main="Normal Q-Q plot\ndeviance residuals")
qqline( resid(m.qp))
library(GLMsData)
data(failures)
failures
library(PASWR)
library(memisc)
library(GLMsData)
data(failures)
failures
plot(Failures ~ Time1, data=failures, xlab="Time spent in Mode 1", ylab="Number of failures")
data(failures)
failures
library(PASWR)
library(memisc)
library(GLMsData)
par(mfrow=c(1,2))
plot(Failures ~ Time2, data=failures,xlab="Time spent in Mode 2",ylab="Number of failures")
plot(log(Failures) ~ log(Time2), data=failures,xlab="log(Time spent in Mode 2)",ylab="Number of failures")
fitted.identity <- lm(Failures ~ Time1 + log(Time2), data=failures)
printCoefmat( coef( summary(fitted.identity)))
fitted.poisson <- glm(Failures ~ Time1 + log(Time2), data=failures, family=poisson(link="log"))
printCoefmat( coef( summary(fitted.poisson)))
deviance(fitted.poisson)
df.residual(fitted.poisson)
m.qp <- glm(Failures ~ Time1, data=failures, family=quasipoisson)
printCoefmat( coef( summary(m.qp)))
plot( resid(m.qp) ~ sqrt(fitted(m.qp)), las=1, main="Deviance residuals", ylab="Deviance residuals",xlab="Square root of fitted values" )
plot( cooks.distance(m.qp), type="h", las=1,ylab="Cook's distance, D", main="Cook's distance")
qqnorm( resid(m.qp), las=1,main="Normal Q-Q plot\ndeviance residuals")
qqline( resid(m.qp))
data("ccancer")
ccancer
fitted(m.qp)
failures$Failures
sqrt(fitted(m.qp))
fitted(m.qp)
plot( resid(m.qp) ~ fitted(m.qp), las=1, main="Deviance residuals", ylab="Deviance residuals",xlab="Square root of fitted values" )
fitted(m.qp)
resid(m.qp)
sqrt(fitted(m.qp))
sqrt(failures$Failures)
plot( resid(m.qp) ~ sqrt(fitted(m.qp)), las=1, main="Deviance residuals", ylab="Deviance residuals",xlab="Square root of fitted values" )
abline( coef(resid(m.qp) ~ sqrt(fitted(m.qp))), lty=1, lwd=2)
plot( resid(m.qp) ~ sqrt(fitted(m.qp)), las=1, main="Deviance residuals", ylab="Deviance residuals",xlab="Square root of fitted values" )
abline( coef(lm(resid(m.qp) ~ sqrt(fitted(m.qp)))), lty=1, lwd=2)
plot( resid(m.qp) ~ sqrt(fitted(m.qp)), las=1, main="Deviance residuals", ylab="Deviance residuals",xlab="Square root of fitted values" )
abline( coef(lm(resid(m.qp) ~ sqrt(fitted(m.qp)))), lty=2, lwd=2)
plot( resid(m.qp) ~ sqrt(fitted(m.qp)), las=1, main="Deviance residuals", ylab="Deviance residuals",xlab="Square root of fitted values" )
plot(Count ~ Region, data=ccancer, xlab="Region",ylab="Cancer number", las=1, main="Cancer rate against Geographic location")
plot(Count~Gender, data=ccancer, xlab="Gender", ylab="Cancer number", las=1, main="Cancer rate against Gender")
?plot
plot(Count ~ Region, data=ccancer, xlab="Region",ylab="Cancer number", las=0, main="Cancer rate against Geographic location")
plot(Count ~ Region, data=ccancer, xlab="Region",ylab="Cancer number", las=1, main="Cancer rate against Geographic location")
plot(Count ~ Region, data=ccancer, xlab="Region",ylab="Cancer number", las=0, main="Cancer rate against Geographic location")
plot(Count ~ Region, data=ccancer, xlab="Region",ylab="Cancer number", las=1, main="Cancer rate against Geographic location")
plot(Count ~ Region + Site, data=ccancer, xlab="Region",ylab="Cancer number", las=1, main="Cancer rate against Geographic location")
plot(Lung ~ Region, data=ccancer, xlab="Region",ylab="Cancer number", las=1, main="Cancer rate against Geographic location")
plot(Site  ~ Region, data=ccancer, xlab="Region",ylab="Cancer number", las=1, main="Cancer rate against Geographic location")
plot(Count ~ Region, data=ccancer, xlab="Region",ylab="Cancer number", las=1, main="Cancer rate against Geographic location")
ccancer$Count / ccancer$Population * 1000
plot(Count/Population *1000 ~ Region, data=ccancer, xlab="Region",ylab="Cancer number", las=1, main="Cancer rate against Geographic location")
plot(Count/Population*1000~Gender, data=ccancer, xlab="Gender", ylab="Cancer number", las=1, main="Cancer rate against Gender")
plot(Count/Population *1000 ~ Region, data=ccancer, xlab="Region",ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Geographic location")
plot(Count/Population*1000~Site, data=ccancer, xlab="Gender", ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Gender")
plot(Count/Population*1000~Site, data=ccancer, xlab="Gender", ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Cancer Site")
plot(Count/Population*1000~Site, data=ccancer, xlab="Site", ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Cancer Site")
plot(Count/Population*1000~Site, data=ccancer, xlab="Site", ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Cancer Site")
data("ccancer")
ccancer
plot(Count/Population *1000 ~ Region, data=ccancer, xlab="Region",ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Geographic location")
plot(Count/Population*1000~Gender, data=ccancer, xlab="Gender", ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Gender")
with(ccancer, {
Cancer.Rate <- Count/Population*1000
plot(Cancer.Rate ~ Region, data=ccancer, xlab="Region",ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Geographic location")
plot(Cancer.Rate ~ Gender, data=ccancer, xlab="Gender", ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Gender")
plot(Cancer.Rate ~ Site, data=ccancer, xlab="Site", ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Cancer Site")
})
plot( cooks.distance(m.qp), type="h", las=1,ylab="Cook's distance, D", main="Cook's distance")
par(mfrow=c(1,2))
plot(Failures ~ Time2, data=failures,xlab="Time spent in Mode 2",ylab="Number of failures")
plot(log(Failures) ~ log(Time2), data=failures,xlab="log(Time spent in Mode 2)",ylab="Number of failures")
par(mfrow=c(1,3))
with(ccancer, {
Cancer.Rate <- Count/Population*1000
plot(Cancer.Rate ~ Region, data=ccancer, xlab="Region",ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Geographic location")
plot(Cancer.Rate ~ Gender, data=ccancer, xlab="Gender", ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Gender")
plot(Cancer.Rate ~ Site, data=ccancer, xlab="Site", ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Cancer Site")
})
par(mfrow=c(1,3))
with(ccancer, {
Cancer.Rate <- Count/Population*1000
plot(Cancer.Rate ~ Region, data=ccancer, xlab="Region",ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Geographic location")
plot(Cancer.Rate ~ Gender, data=ccancer, xlab="Gender", ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Gender")
plot(log(Cancer.Rate) ~ Site, data=ccancer, xlab="Site", ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Cancer Site")
})
with(ccancer, {
Cancer.Rate <- Count/Population*1000
plot(Cancer.Rate ~ Region, data=ccancer, xlab="Region",ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Geographic location")
plot(Cancer.Rate ~ Gender, data=ccancer, xlab="Gender", ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Gender")
plot(Cancer.Rate ~ Site, data=ccancer, xlab="Site", ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Cancer Site")
})
with(ccancer, {
Cancer.Rate <- Count/Population*1000
plot(log(Cancer.Rate) ~ Region, data=ccancer, xlab="Region",ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Geographic location")
plot(Cancer.Rate ~ Gender, data=ccancer, xlab="Gender", ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Gender")
plot(Cancer.Rate ~ Site, data=ccancer, xlab="Site", ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Cancer Site")
})
with(ccancer, {
Cancer.Rate <- Count/Population*1000
plot(Cancer.Rate ~ Region, data=ccancer, xlab="Region",ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Geographic location")
plot(Cancer.Rate ~ Gender, data=ccancer, xlab="Gender", ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Gender")
plot(Cancer.Rate ~ Site, data=ccancer, xlab="Site", ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Cancer Site")
})
pearson.gof <- sum(m.qp$weights * m.qp$residuals^2)
tab <- data.frame(GoF.Statistic=c(m.qp$deviance, pearson.gof))
tab$DF <- rep(m.qp$df.residual, 2)
tab$P.Value <- pchisq(tab$GoF, df=tab$DF, lower.tail=FALSE)
row.names(tab) <- c("Deviance", "Pearson"); print(tab, digits=3)
fit <- m.qp
pearson.gof <- sum(fit$weights * fit$residuals^2)
tab <- data.frame(GoF.Statistic=c(fit$deviance, pearson.gof))
tab$DF <- rep(fit$df.residual, 2)
tab$P.Value <- pchisq(tab$GoF, df=tab$DF, lower.tail=FALSE)
row.names(tab) <- c("Deviance", "Pearson"); print(tab, digits=3)
fit <- fitted.poisson
pearson.gof <- sum(fit$weights * fit$residuals^2)
tab <- data.frame(GoF.Statistic=c(fit$deviance, pearson.gof))
tab$DF <- rep(fit$df.residual, 2)
tab$P.Value <- pchisq(tab$GoF, df=tab$DF, lower.tail=FALSE)
row.names(tab) <- c("Deviance", "Pearson"); print(tab, digits=3)
fit <- m.qp
pearson.gof <- sum(fit$weights * fit$residuals^2)
tab <- data.frame(GoF.Statistic=c(fit$deviance, pearson.gof))
tab$DF <- rep(fit$df.residual, 2)
tab$P.Value <- pchisq(tab$GoF, df=tab$DF, lower.tail=FALSE)
row.names(tab) <- c("Deviance", "Pearson"); print(tab, digits=3)
y <- c(15, 26, 4); x <- c(1/4, 1/2, 1/4)
fit <- glm( y ~ 0+x, family=poisson)
pearson.gof <- sum(fit$weights * fit$residuals^2)
tab <- data.frame(GoF.Statistic=c(fit$deviance, pearson.gof))
tab$DF <- rep(fit$df.residual, 2)
tab$P.Value <- pchisq(tab$GoF, df=tab$DF, lower.tail=FALSE)
row.names(tab) <- c("Deviance", "Pearson"); print(tab, digits=3)
plot(Failures ~ Time1, data=failures, xlab="Time spent in Mode 1", ylab="Number of failures")
plot(Failures ~ Time1, data=failures, xlab="Time spent in Mode 1", ylab="Number of failures")
plot(Failures ~ log(Time1), data=failures, xlab="Time spent in Mode 1", ylab="Number of failures")
plot(Failures ~ Time1, data=failures, xlab="Time spent in Mode 1", ylab="Number of failures")
m.qp <- glm(Failures ~ log(Time1), data=failures, family=quasipoisson)
printCoefmat( coef( summary(m.qp)))
m.qp <- glm(Failures ~ Time1, data=failures, family=quasipoisson)
printCoefmat( coef( summary(m.qp)))
m.qp <- glm(Failures ~ log(Time1)+0, data=failures, family=quasipoisson)
printCoefmat( coef( summary(m.qp)))
fit <- m.qp
pearson.gof <- sum(fit$weights * fit$residuals^2)
tab <- data.frame(GoF.Statistic=c(fit$deviance, pearson.gof))
tab$DF <- rep(fit$df.residual, 2)
tab$P.Value <- pchisq(tab$GoF, df=tab$DF, lower.tail=FALSE)
row.names(tab) <- c("Deviance", "Pearson"); print(tab, digits=3)
m.qp <- glm(Failures ~ Time1, data=failures, family=quasipoisson)
printCoefmat( coef( summary(m.qp)))
fit <- m.qp
pearson.gof <- sum(fit$weights * fit$residuals^2)
tab <- data.frame(GoF.Statistic=c(fit$deviance, pearson.gof))
tab$DF <- rep(fit$df.residual, 2)
tab$P.Value <- pchisq(tab$GoF, df=tab$DF, lower.tail=FALSE)
row.names(tab) <- c("Deviance", "Pearson"); print(tab, digits=3)
m.p <- glm(Count/Population*1000 ~ Region + Gender + Site, family=Poisson(link="log"))
m.p <- glm(Count/Population*1000 ~ Region + Gender + Site, family=poisson(link="log"))p
m.p <- glm(Count/Population*1000 ~ Region + Gender + Site, family=poisson(link="log"))
m.p <- glm(Count/Population*1000 ~ Region + Gender + Site, data=ccancer, family=poisson(link="log"))
printCoefmat(coef(summary(m.p)), digits=3)
m.p <- glm(as.interger(Count/Population*1000000) ~ Region + Gender + Site, data=ccancer, family=poisson(link="log"))
m.p <- glm(as.integer(Count/Population*1000000) ~ Region + Gender + Site, data=ccancer, family=poisson(link="log"))
printCoefmat(coef(summary(m.p)), digits=3)
m.p <- glm(Count/Population ~ Region + Gender + Site, data=ccancer, family=poisson(link="log"))
printCoefmat(coef(summary(m.p)), digits=3)
m.p <- glm(Count ~ Region + Gender + Site + offset(log(Population)), data=ccancer, family=poisson(link="log"))
printCoefmat(coef(summary(m.p)), digits=3)
with(ccancer, {
Cancer.Rate <- Count/Population*1000
plot(Cancer.Rate ~ Region, data=ccancer, xlab="Region",ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Geographic location")
plot(Cancer.Rate ~ Gender, data=ccancer, xlab="Gender", ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Gender")
plot(Cancer.Rate ~ Site, data=ccancer, xlab="Site", ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Cancer Site")
})
with(ccancer, {
Cancer.Rate <- Count/Population*1000
plot(Cancer.Rate ~ Region, data=ccancer, xlab="Region",ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Geographic location")
plot(Cancer.Rate ~ Gender, data=ccancer, xlab="Gender", ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Gender")
})
library(PASWR)
library(memisc)
library(GLMsData)
data(failures)
failures
plot(Failures ~ Time1, data=failures, xlab="Time spent in Mode 1", ylab="Number of failures")
par(mfrow=c(1,2))
plot(Failures ~ Time2, data=failures,xlab="Time spent in Mode 2",ylab="Number of failures")
plot(log(Failures) ~ log(Time2), data=failures,xlab="log(Time spent in Mode 2)",ylab="Number of failures")
fitted.identity <- lm(Failures ~ Time1 + log(Time2), data=failures)
printCoefmat( coef( summary(fitted.identity)))
fitted.poisson <- glm(Failures ~ Time1 + log(Time2), data=failures, family=poisson(link="log"))
printCoefmat( coef( summary(fitted.poisson)))
deviance(fitted.poisson)
df.residual(fitted.poisson)
m.qp <- glm(Failures ~ Time1, data=failures, family=quasipoisson)
printCoefmat( coef( summary(m.qp)))
fit <- m.qp
pearson.gof <- sum(fit$weights * fit$residuals^2)
tab <- data.frame(GoF.Statistic=c(fit$deviance, pearson.gof))
tab$DF <- rep(fit$df.residual, 2)
tab$P.Value <- pchisq(tab$GoF, df=tab$DF, lower.tail=FALSE)
row.names(tab) <- c("Deviance", "Pearson"); print(tab, digits=3)
plot( resid(m.qp) ~ sqrt(fitted(m.qp)), las=1, main="Deviance residuals", ylab="Deviance residuals",xlab="Square root of fitted values" )
plot( cooks.distance(m.qp), type="h", las=1,ylab="Cook's distance, D", main="Cook's distance")
qqnorm( resid(m.qp), las=1,main="Normal Q-Q plot\ndeviance residuals")
qqline( resid(m.qp))
data("ccancer")
ccancer
with(ccancer, {
Cancer.Rate <- Count/Population*1000
plot(Cancer.Rate ~ Region, data=ccancer, xlab="Region",ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Geographic location")
plot(Cancer.Rate ~ Gender, data=ccancer, xlab="Gender", ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Gender")
})
plot(Count/Population*1000~Site, data=ccancer, xlab="Site", ylab="Cancer rate per thousand people", las=1, main="Cancer rate against Cancer Site")
m.p <- glm(Count ~ Region + Gender + Site + offset(log(Population)), data=ccancer, family=poisson(link="log"))
printCoefmat(coef(summary(m.p)), digits=3)
fitted.poisson <- glm(Failures ~ Time1 * log(Time2), data=failures, family=poisson(link="log"))
printCoefmat( coef( summary(fitted.poisson)))
fitted.poisson <- glm(Failures ~ Time1 + log(Time2), data=failures, family=poisson(link="log"))
printCoefmat( coef( summary(fitted.poisson)))
m.qp <- glm(Failures ~ Time1 * Time2, data=failures, family=quasipoisson)
printCoefmat( coef( summary(m.qp)))
m.qp <- glm(Failures ~ Time1 * log(Time2), data=failures, family=quasipoisson)
printCoefmat( coef( summary(m.qp)))
m.qp <- glm(Failures ~ Time1 + log(Time2) + Time1:Time2, data=failures, family=quasipoisson)
printCoefmat( coef( summary(m.qp)))
m.qp <- glm(Failures ~ Time1, data=failures, family=quasipoisson)
printCoefmat( coef( summary(m.qp)))
with(ccancer,{
Count.by.Site.Gender <- xtabs(Count ~ Gender + Site)
ftable(Count.by.Site.Gender)
})
with(ccancer,{
Count.by.Site.Gender <- xtabs(Count ~ Gender + Site)
Count.by.Site.Gender
#ftable(Count.by.Site.Gender)
})
with(ccancer,{
Count.by.Site.Gender <- xtabs(Count ~ Gender + Site)
Count.by.Site.Gender
})
install.packages("GLMsData")
library(GLMsData)
data(danishlc)
danishlc
#Mo hinh binomial
model1= glm(Cases/Pop~Age*City,family=binomial,weights=Pop,data=danishlc)
anova(model1,test="Chisq")
#=> Tu kiem dinh anova, ta thay co bien age co y nghia. Vi vay, ta chi giu lai bien age trong mo hinh
model2= glm(Cases/Pop~Age,family=binomial,weights=Pop,data=danishlc)
anova(model2,test="Chisq")
#Nhanxet: Chi co bien age co y nghia
#Mo hinh Poisson cho ty le
model3=glm(Cases~offset(log(Pop))+City*Age,family=poisson,data=danishlc)
anova(model3,test="Chisq")
#Tu anova, ta thay chi co bien age co y nghia. Vi vay ta chi giu lai bien age
model4=glm(Cases~offset(log(Pop))+Age,family=poisson,data=danishlc) #Bien off-set lun giu lai
anova(model4,test="Chisq")
#Note: Vay 2 mo hinh Poisson va binomial deu ra ket qua bien age co y nghia
#So sanh 2 mo binh bang AIC (hoac BIC)
AIC(model4)
AIC(model2)
#=> Vi AIC mo hinh 2 thap hon nen mo hinh 2 tot hon 1 chut
danishlc$Cases / danishlc$Pop
# Vi ty le cua cases/pop hầu hết dưới 1% nên thoả mãn giả thiết để binomial va poisson gan tuong duong nhau
10.10
data(nminer)
nminer
model1=glm(Minerab~Eucs+Area+Grazed+Shrubs+Bulokes,family=poisson,data=nminer)
anova(model1,test="Chisq")
#theo ket qua kd anova, bien giai thich Eucs va Area co y nghia trong viec giai thich so chim minerab (co anh huong den so con chim miner)
#xay dung mo hinh voi 2 bien
model2=glm(Minerab~Eucs+Area,family=poisson,data=nminer)
anova(model2,test="Chisq")
#2 So sanh 2 model voi nhau( vi model 2 la nested model cua model 1), dung anova:
anova(model2,model1,test="Chisq")#dua model nested vao trc
#Vi pvalue lon nen mo hinh nhieu bien ko tot hon => sd mo hinh it bien
#including a diagnostic analysis (Phan tich chuan doan):
#Can bieu do phan du, cook distance, QQ plot
#Bieu do 1: Residual plot:
plot( resid(model2) ~ sqrt(fitted(model2)), las=1,
main="Deviance residuals", ylab="Deviance residuals",
xlab="Square root of fitted values" )
#ko co pattern ro rang
#Bieu do 2: Cook's distance
plot( cooks.distance(model2), type="h", las=1,
ylab="Cook's distance, D", main="Cook's distance")
#Ko co quan sat nao co anh huong lon den ket qua cua mo hinh (influential observation)
#Bieu do 3: Q-Q plot
qqnorm( resid(model2), las=1,
main="Normal Q-Q plot\ndeviance residuals")
qqline( resid(model2))
#phan du gan phan phoi chuan
#b. Doi voi pp Poisson, Diem xap xi yen ngua chinh xac khi ma bien dem >=3 doi voi tung quan sat (page 372)
nminer$Minerab
#Vi nhieu quan sat <3 nen diem xap xi yen ngua trong truong hop nay ko chinh xac
10.11
data(cervical)
cervical
cervical$Rate <- cervical$Deaths / cervical$Wyears * 1000  # Rate per 1000
cervical$Age <- ordered(cervical$Age,  # Ensure age-order is preserved
levels=c("25to34", "35to44", "45to54", "55to64") )
#cervical$Country <- abbreviate(cervical$Country, 1)   # Abbreviate city names
matplot( xtabs( Deaths*1000/Wyears ~ Age+Country, data=cervical), pch=1:4, lty=1:4,#Wyears co the hieu la dan so
type="b", lwd=2, col="black", axes=FALSE, ylim=c(0, 25),
xlab="Age group", ylab="Cases/1000")
axis(side=1, at=1:4, labels=levels(cervical$Age))
axis(side=2, las=1); box()
legend("topleft", col="black", pch=1:4, lwd=2, lty=1:4, merge=FALSE,
legend=c("EngWales", "Belgium", "France", "Italy") )
#So luong ng chet boi ung thu cang lon khi tuoi cang cao
#Khi dung poisson de mo hinh hoa ty le, thi mo hinh co dang: logu=logT+bo+bjxj
#do he so cua logT=1 nen ta dung offset
model1=glm(Deaths~offset(log(Wyears))+Age*Country,family=poisson,data=cervical)
anova(model1, test = "Chisq")
c#Ca 3 bien deu co y nghia thong ke khi giai thich cho so ng chet vi ung thu
#Bieu do 1: Residual plot cua mh Poisson:
plot( resid(model1) ~ sqrt(fitted(model1)), las=1,
main="Deviance residuals", ylab="Deviance residuals",
xlab="Square root of fitted values" )
# Co pattern
plot( rstandard(model1) ~ fitted(model1), main="Poisson glm" )
##Dung quasi-poisson cho mo hinh tren
model2=glm(Deaths~offset(log(Wyears))+Age+Country,family=quasipoisson,data=cervical)#chu y: trong quassi ko them bien tuong tac
anova(model2, test = "F")
#vay vien age va country co y nghia tke giai thich cho so ng chet vi ung thu
#Bieu do 2: Residual plot cua mh Poisson:
plot( resid(model2) ~ sqrt(fitted(model2)), las=1,
main="Deviance residuals", ylab="Deviance residuals",
xlab="Square root of fitted values" )
#ko co pattern ro ret
##Dung negative binominal cho mo hinh tren
install.packages("MASS")
library(MASS)
model3.nb <- glm.nb(Deaths ~ offset(log(Wyears))+Age+Country, data=cervical )
model3.nb <-glm.convert(model3.nb)
printCoefmat(coef(summary(model3.nb, dispersion=1)))
anova(model3.nb,test="F")
#Bieu do 3: Residual plot cua mh NB:
plot( resid(model3.nb) ~ sqrt(fitted(model3.nb)), las=1,
main="Deviance residuals", ylab="Deviance residuals",
xlab="Square root of fitted values" )
#ko co pattern ro ret
#So sanh 3 mo hinh: Poisson, Quasi Poisson, NB
AIC(model1) #154
AIC(model2)
AIC(model3.nb) #216
#AIC cua model1 nho hon, mo hinh Poisson tot hon NB
10.12
data(dwomen)
dwomen
model1=glm(Counts~Depression+SLE+Children,family=poisson,data=dwomen)
anova(model1, test = "F")
library(GLMsData)
data(danishlc)
danishlc
#Mo hinh binomial
model1= glm(Cases/Pop~Age*City,family=binomial,weights=Pop,data=danishlc)
library(GLMsData)
data(danishlc)
danishlc
#Mo hinh binomial
model1= glm(Cases/Pop~Age*City,family=binomial,weights=Pop,data=danishlc)
anova(model1,test="Chisq")
#=> Tu kiem dinh anova, ta thay co bien age co y nghia. Vi vay, ta chi giu lai bien age trong mo hinh
model2= glm(Cases/Pop~Age,family=binomial,weights=Pop,data=danishlc)
anova(model2,test="Chisq")
install.packages("GLMsData")
install.packages("GLMsData")
#=> Tu kiem dinh anova, ta thay co bien age co y nghia. Vi vay, ta chi giu lai bien age trong mo hinh
model2= glm(Cases/Pop~Age,family=binomial,weights=Pop,data=danishlc)
anova(model2,test="Chisq")
#Nhanxet: Chi co bien age co y nghia
#Mo hinh Poisson cho ty le
model3=glm(Cases~offset(log(Pop))+City*Age,family=poisson,data=danishlc)
anova(model3,test="Chisq")
#Tu anova, ta thay chi co bien age co y nghia. Vi vay ta chi giu lai bien age
model4=glm(Cases~offset(log(Pop))+Age,family=poisson,data=danishlc) #Bien off-set lun giu lai
anova(model4,test="Chisq")
#Note: Vay 2 mo hinh Poisson va binomial deu ra ket qua bien age co y nghia
#So sanh 2 mo binh bang AIC (hoac BIC)
AIC(model4)
#bai 8.12
library(GLMsData)
data(nambeware)
plot(Price~Diam, data=nambeware)
nware <- glm(Price~log(Diam), data=nambeware,
family = Gamma(link=log), subset=(-11))
summary(nware)
plot(rstandard(nware)~log(fitted(nware)))
plot(cooks.distance(nware), type="h")
colSums(influence.measures(nware)$is.inf)
qqnorm(rstandard(nware))
qqline(rstandard(nware))
library(statmod)
qqnorm(qresid(nware))
install.packages(statmod)
??statmod
#bai 8.11
library(GLMsData)
data("blocks")
blok <- glm(Number ~ Age, data=blocks,
family=poisson)
par(mfrow=c(2,2))
#plot(qresid(blok) ~ blocks$Age)
plot(qresid(blok) ~ sqrt(fitted(blok)))
plot(cooks.distance(blok), type="h")
qqnorm(rstandard(blok))
qqline(rstandard(blok))
qqnorm(qresid(blok))
qqline(qresid(blok))
colSums(influence.measures(blok)$is.inf)
??qresid
install.packages("statmod")
install.packages("statmod")
install.packages("statmod")
install.packages("statmod")
install.packages("statmod")
install.packages("statmod")
install.packages(statmod)
install.packages(statmod)
install.packages("statmod")
install.packages('statmod')
install.package('statmod')
install.packages('statmod')
install.packages("https://cran.r-project.org/src/contrib/statmod_1.4.36.tar.gz", response=NULL)
install.packages("statmod")
?colSums
data(nambeware)
head(nambeware)
summary(nambeware)
#bai 8.12
library(GLMsData)
data(nambeware)
plot(Price~Diam, data=nambeware)
nware <- glm(Price~log(Diam), data=nambeware,
family = Gamma(link=log), subset=(-11))
summary(nware)
plot(rstandard(nware)~log(fitted(nware)))
plot(cooks.distance(nware), type="h")
colSums(influence.measures(nware)$is.inf)
qqnorm(rstandard(nware))
plot(cooks.distance(nware), type="h")
library(statmod)
qqnorm(qresid(nware))
qqline(qresid(nware))
plot(rstandard(nware)~log(nambeware$Diam))
plot(hatvalues(nware), type="h")
#plot(qresid(blok) ~ blocks$Age)
plot(qresid(blok) ~ sqrt(fitted(blok)))
plot(cooks.distance(blok), type="h")
qqnorm(rstandard(blok))
qqline(rstandard(blok))
qqnorm(qresid(blok))
qqline(qresid(blok))
colSums(influence.measures(blok)$is.inf)
?influence.measures
install.packages("knitr")
library(knitr)
install.packages("tinytex")
tinytex::install_tinytex()
install.packages("knitr")
install.packages("knitr")
library(knitr)
install.packages("tinytex")
tinytex::install_tinytex()
